// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#ifndef PROTOBUF_meta_2eproto__INCLUDED
#define PROTOBUF_meta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "option.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_meta_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMetaImpl();
void InitDefaultsMeta();
inline void InitDefaults() {
  InitDefaultsMeta();
}
}  // namespace protobuf_meta_2eproto
namespace hdcs {
namespace networking {
class Meta;
class MetaDefaultTypeInternal;
extern MetaDefaultTypeInternal _Meta_default_instance_;
}  // namespace networking
}  // namespace hdcs
namespace hdcs {
namespace networking {

enum Meta_Type {
  Meta_Type_REQUEST = 0,
  Meta_Type_RESPONSE = 1
};
bool Meta_Type_IsValid(int value);
const Meta_Type Meta_Type_Type_MIN = Meta_Type_REQUEST;
const Meta_Type Meta_Type_Type_MAX = Meta_Type_RESPONSE;
const int Meta_Type_Type_ARRAYSIZE = Meta_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Meta_Type_descriptor();
inline const ::std::string& Meta_Type_Name(Meta_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Meta_Type_descriptor(), value);
}
inline bool Meta_Type_Parse(
    const ::std::string& name, Meta_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Meta_Type>(
    Meta_Type_descriptor(), name, value);
}
// ===================================================================

class Meta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hdcs.networking.Meta) */ {
 public:
  Meta();
  virtual ~Meta();

  Meta(const Meta& from);

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Meta(Meta&& from) noexcept
    : Meta() {
    *this = ::std::move(from);
  }

  inline Meta& operator=(Meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Meta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Meta* internal_default_instance() {
    return reinterpret_cast<const Meta*>(
               &_Meta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Meta* other);
  friend void swap(Meta& a, Meta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Meta* New() const PROTOBUF_FINAL { return New(NULL); }

  Meta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Meta& from);
  void MergeFrom(const Meta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Meta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Meta_Type Type;
  static const Type REQUEST =
    Meta_Type_REQUEST;
  static const Type RESPONSE =
    Meta_Type_RESPONSE;
  static inline bool Type_IsValid(int value) {
    return Meta_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Meta_Type_Type_MIN;
  static const Type Type_MAX =
    Meta_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Meta_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Meta_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Meta_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Meta_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string method = 100;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 100;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // optional string reason = 202;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 202;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // required uint64 sequence_id = 2;
  bool has_sequence_id() const;
  void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 2;
  ::google::protobuf::uint64 sequence_id() const;
  void set_sequence_id(::google::protobuf::uint64 value);

  // optional .hdcs.networking.CompressType expected_response_compress_type = 301;
  bool has_expected_response_compress_type() const;
  void clear_expected_response_compress_type();
  static const int kExpectedResponseCompressTypeFieldNumber = 301;
  ::hdcs::networking::CompressType expected_response_compress_type() const;
  void set_expected_response_compress_type(::hdcs::networking::CompressType value);

  // required .hdcs.networking.Meta.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::hdcs::networking::Meta_Type type() const;
  void set_type(::hdcs::networking::Meta_Type value);

  // optional bool failed = 200;
  bool has_failed() const;
  void clear_failed();
  static const int kFailedFieldNumber = 200;
  bool failed() const;
  void set_failed(bool value);

  // optional int64 server_timeout = 101;
  bool has_server_timeout() const;
  void clear_server_timeout();
  static const int kServerTimeoutFieldNumber = 101;
  ::google::protobuf::int64 server_timeout() const;
  void set_server_timeout(::google::protobuf::int64 value);

  // optional int32 error_code = 201;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 201;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional .hdcs.networking.CompressType compress_type = 300;
  bool has_compress_type() const;
  void clear_compress_type();
  static const int kCompressTypeFieldNumber = 300;
  ::hdcs::networking::CompressType compress_type() const;
  void set_compress_type(::hdcs::networking::CompressType value);

  // @@protoc_insertion_point(class_scope:hdcs.networking.Meta)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_sequence_id();
  void clear_has_sequence_id();
  void set_has_method();
  void clear_has_method();
  void set_has_server_timeout();
  void clear_has_server_timeout();
  void set_has_failed();
  void clear_has_failed();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_reason();
  void clear_has_reason();
  void set_has_compress_type();
  void clear_has_compress_type();
  void set_has_expected_response_compress_type();
  void clear_has_expected_response_compress_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::uint64 sequence_id_;
  int expected_response_compress_type_;
  int type_;
  bool failed_;
  ::google::protobuf::int64 server_timeout_;
  ::google::protobuf::int32 error_code_;
  int compress_type_;
  friend struct ::protobuf_meta_2eproto::TableStruct;
  friend void ::protobuf_meta_2eproto::InitDefaultsMetaImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Meta

// required .hdcs.networking.Meta.Type type = 1;
inline bool Meta::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Meta::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Meta::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Meta::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::hdcs::networking::Meta_Type Meta::type() const {
  // @@protoc_insertion_point(field_get:hdcs.networking.Meta.type)
  return static_cast< ::hdcs::networking::Meta_Type >(type_);
}
inline void Meta::set_type(::hdcs::networking::Meta_Type value) {
  assert(::hdcs::networking::Meta_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:hdcs.networking.Meta.type)
}

// required uint64 sequence_id = 2;
inline bool Meta::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Meta::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Meta::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Meta::clear_sequence_id() {
  sequence_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence_id();
}
inline ::google::protobuf::uint64 Meta::sequence_id() const {
  // @@protoc_insertion_point(field_get:hdcs.networking.Meta.sequence_id)
  return sequence_id_;
}
inline void Meta::set_sequence_id(::google::protobuf::uint64 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:hdcs.networking.Meta.sequence_id)
}

// optional string method = 100;
inline bool Meta::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Meta::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Meta::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Meta::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
inline const ::std::string& Meta::method() const {
  // @@protoc_insertion_point(field_get:hdcs.networking.Meta.method)
  return method_.GetNoArena();
}
inline void Meta::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hdcs.networking.Meta.method)
}
#if LANG_CXX11
inline void Meta::set_method(::std::string&& value) {
  set_has_method();
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdcs.networking.Meta.method)
}
#endif
inline void Meta::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdcs.networking.Meta.method)
}
inline void Meta::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdcs.networking.Meta.method)
}
inline ::std::string* Meta::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:hdcs.networking.Meta.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Meta::release_method() {
  // @@protoc_insertion_point(field_release:hdcs.networking.Meta.method)
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Meta::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:hdcs.networking.Meta.method)
}

// optional int64 server_timeout = 101;
inline bool Meta::has_server_timeout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Meta::set_has_server_timeout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Meta::clear_has_server_timeout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Meta::clear_server_timeout() {
  server_timeout_ = GOOGLE_LONGLONG(0);
  clear_has_server_timeout();
}
inline ::google::protobuf::int64 Meta::server_timeout() const {
  // @@protoc_insertion_point(field_get:hdcs.networking.Meta.server_timeout)
  return server_timeout_;
}
inline void Meta::set_server_timeout(::google::protobuf::int64 value) {
  set_has_server_timeout();
  server_timeout_ = value;
  // @@protoc_insertion_point(field_set:hdcs.networking.Meta.server_timeout)
}

// optional bool failed = 200;
inline bool Meta::has_failed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Meta::set_has_failed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Meta::clear_has_failed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Meta::clear_failed() {
  failed_ = false;
  clear_has_failed();
}
inline bool Meta::failed() const {
  // @@protoc_insertion_point(field_get:hdcs.networking.Meta.failed)
  return failed_;
}
inline void Meta::set_failed(bool value) {
  set_has_failed();
  failed_ = value;
  // @@protoc_insertion_point(field_set:hdcs.networking.Meta.failed)
}

// optional int32 error_code = 201;
inline bool Meta::has_error_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Meta::set_has_error_code() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Meta::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Meta::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 Meta::error_code() const {
  // @@protoc_insertion_point(field_get:hdcs.networking.Meta.error_code)
  return error_code_;
}
inline void Meta::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:hdcs.networking.Meta.error_code)
}

// optional string reason = 202;
inline bool Meta::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Meta::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Meta::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Meta::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& Meta::reason() const {
  // @@protoc_insertion_point(field_get:hdcs.networking.Meta.reason)
  return reason_.GetNoArena();
}
inline void Meta::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hdcs.networking.Meta.reason)
}
#if LANG_CXX11
inline void Meta::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdcs.networking.Meta.reason)
}
#endif
inline void Meta::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdcs.networking.Meta.reason)
}
inline void Meta::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdcs.networking.Meta.reason)
}
inline ::std::string* Meta::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:hdcs.networking.Meta.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Meta::release_reason() {
  // @@protoc_insertion_point(field_release:hdcs.networking.Meta.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Meta::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:hdcs.networking.Meta.reason)
}

// optional .hdcs.networking.CompressType compress_type = 300;
inline bool Meta::has_compress_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Meta::set_has_compress_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Meta::clear_has_compress_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Meta::clear_compress_type() {
  compress_type_ = 0;
  clear_has_compress_type();
}
inline ::hdcs::networking::CompressType Meta::compress_type() const {
  // @@protoc_insertion_point(field_get:hdcs.networking.Meta.compress_type)
  return static_cast< ::hdcs::networking::CompressType >(compress_type_);
}
inline void Meta::set_compress_type(::hdcs::networking::CompressType value) {
  assert(::hdcs::networking::CompressType_IsValid(value));
  set_has_compress_type();
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:hdcs.networking.Meta.compress_type)
}

// optional .hdcs.networking.CompressType expected_response_compress_type = 301;
inline bool Meta::has_expected_response_compress_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Meta::set_has_expected_response_compress_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Meta::clear_has_expected_response_compress_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Meta::clear_expected_response_compress_type() {
  expected_response_compress_type_ = 0;
  clear_has_expected_response_compress_type();
}
inline ::hdcs::networking::CompressType Meta::expected_response_compress_type() const {
  // @@protoc_insertion_point(field_get:hdcs.networking.Meta.expected_response_compress_type)
  return static_cast< ::hdcs::networking::CompressType >(expected_response_compress_type_);
}
inline void Meta::set_expected_response_compress_type(::hdcs::networking::CompressType value) {
  assert(::hdcs::networking::CompressType_IsValid(value));
  set_has_expected_response_compress_type();
  expected_response_compress_type_ = value;
  // @@protoc_insertion_point(field_set:hdcs.networking.Meta.expected_response_compress_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace networking
}  // namespace hdcs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hdcs::networking::Meta_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hdcs::networking::Meta_Type>() {
  return ::hdcs::networking::Meta_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_meta_2eproto__INCLUDED
