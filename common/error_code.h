// Copyright (c) 2014 Baidu.com, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef ERROR_CODE_H_
#define ERROR_CODE_H_

namespace hdcs {
namespace networking {

enum ErrorCode {
    HDCS_NETWORK_SUCCESS = 0,
    HDCS_NETWORK_ERROR_PARSE_REQUEST_MESSAGE = 1,
    HDCS_NETWORK_ERROR_PARSE_RESPONSE_MESSAGE = 2,
    HDCS_NETWORK_ERROR_UNCOMPRESS_MESSAGE = 3,
    HDCS_NETWORK_ERROR_COMPRESS_TYPE = 4,
    HDCS_NETWORK_ERROR_NOT_SPECIFY_METHOD_NAME = 5,
    HDCS_NETWORK_ERROR_PARSE_METHOD_NAME = 6,
    HDCS_NETWORK_ERROR_FOUND_SERVICE = 7,
    HDCS_NETWORK_ERROR_FOUND_METHOD = 8,
    HDCS_NETWORK_ERROR_CHANNEL_BROKEN = 9,
    HDCS_NETWORK_ERROR_CONNECTION_CLOSED = 10,
    HDCS_NETWORK_ERROR_REQUEST_TIMEOUT = 11, // request timeout
    HDCS_NETWORK_ERROR_REQUEST_CANCELED = 12, // request canceled
    HDCS_NETWORK_ERROR_SERVER_UNAVAILABLE = 13, // server un-healthy
    HDCS_NETWORK_ERROR_SERVER_UNREACHABLE = 14, // server un-reachable
    HDCS_NETWORK_ERROR_SERVER_SHUTDOWN = 15,
    HDCS_NETWORK_ERROR_SEND_BUFFER_FULL = 16,
    HDCS_NETWORK_ERROR_SERIALIZE_REQUEST = 17,
    HDCS_NETWORK_ERROR_SERIALIZE_RESPONSE = 18,
    HDCS_NETWORK_ERROR_RESOLVE_ADDRESS = 19,
    HDCS_NETWORK_ERROR_CREATE_STREAM = 20,
    HDCS_NETWORK_ERROR_NOT_IN_RUNNING = 21,
    HDCS_NETWORK_ERROR_SERVER_BUSY = 22,

    // error code for listener
    HDCS_NETWORK_ERROR_TOO_MANY_OPEN_FILES = 101,

    HDCS_NETWORK_ERROR_UNKNOWN = 999,
    HDCS_NETWORK_ERROR_FROM_USER = 1000,
};

// Convert error code to human readable string.
const char* ErrorCodeToString(int error_code);

}
}

#endif
